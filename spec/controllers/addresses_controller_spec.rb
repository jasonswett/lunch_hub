require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AddressesController, :type => :controller do

  before(:each) { sign_in }

  # This should return the minimal set of attributes required to create a valid
  # Address. As you add validations to Address, be sure to
  # adjust the attributes here as well.
  let(:state) {
    State.find_or_create_by(
      name: "Michigan",
      abbreviation: "MI"
    )
  }
  let(:valid_attributes) {
    {
      "line1" => "2461 Vista Point Ct",
      "line2" => "",
      "city" => "Walker",
      "state_id" => state.id,
      "zip" => "49534"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AddressesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all addresses as @addresses" do
      address = Address.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:addresses)).to eq([address])
    end
  end

  describe "GET show" do
    it "assigns the requested address as @address" do
      address = Address.create! valid_attributes
      get :show, {:id => address.to_param}, valid_session
      expect(assigns(:address)).to eq(address)
    end
  end

  describe "GET new" do
    it "assigns a new address as @address" do
      get :new, {}, valid_session
      expect(assigns(:address)).to be_a_new(Address)
    end
  end

  describe "GET edit" do
    it "assigns the requested address as @address" do
      address = Address.create! valid_attributes
      get :edit, {:id => address.to_param}, valid_session
      expect(assigns(:address)).to eq(address)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Address" do
        expect {
          post :create, {:address => valid_attributes}, valid_session
        }.to change(Address, :count).by(1)
      end

      it "assigns a newly created address as @address" do
        post :create, {:address => valid_attributes}, valid_session
        expect(assigns(:address)).to be_a(Address)
        expect(assigns(:address)).to be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved address as @address" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        post :create, {:address => { "line1" => "invalid value" }}, valid_session
        expect(assigns(:address)).to be_a_new(Address)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested address" do
        address = Address.create! valid_attributes
        # Assuming there are no other address in the database, this
        # specifies that the Address created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Address).to receive(:update).with({ "line1" => "MyString" })
        put :update, {:id => address.to_param, :address => { "line1" => "MyString" }}, valid_session
      end

      it "assigns the requested address as @address" do
        address = Address.create! valid_attributes
        put :update, {:id => address.to_param, :address => valid_attributes}, valid_session
        expect(assigns(:address)).to eq(address)
      end
    end

    describe "with invalid params" do
      it "assigns the address as @address" do
        address = Address.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Address).to receive(:save).and_return(false)
        put :update, {:id => address.to_param, :address => { "line1" => "invalid value" }}, valid_session
        expect(assigns(:address)).to eq(address)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested address" do
      address = Address.create! valid_attributes
      expect {
        delete :destroy, {:id => address.to_param}, valid_session
      }.to change(Address, :count).by(-1)
    end
  end

end
